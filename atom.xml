<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凉城听暖</title>
  
  <subtitle>Do What You Love，Love What You Do</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://FanCYu.coding.me/"/>
  <updated>2018-10-09T11:51:19.764Z</updated>
  <id>http://FanCYu.coding.me/</id>
  
  <author>
    <name>凉城听暖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>卡特兰数</title>
    <link href="http://FanCYu.coding.me/2018/10/09/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"/>
    <id>http://FanCYu.coding.me/2018/10/09/卡特兰数/</id>
    <published>2018-10-09T10:53:02.000Z</published>
    <updated>2018-10-09T11:51:19.764Z</updated>
    
    <content type="html"><![CDATA[<p>不知道为啥，总觉得数论很难，而noip2017的day1 t1给了我很大的心里阴影<br>不管怎么样，也不能不管数论啊。。。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>首先，什么是卡特兰数呢<br><img src="/img/2018/1009/神奇海螺.jpg" alt="估计也就神奇海螺会数论了吧。。"><br><a id="more"></a><br>Catalan数好像来自一个这样的问题<br>一个栈的进栈序列为1,2,3，……，n，有多少个不同的出栈序列？</p><p>我们来分析一下<br>首先，我们设f（n）=序列个数为n的出栈序列种数。（我们假定，最后出栈的元素为k，显然，k取不同值时的情况是相互独立的，也就是求出每种k最后出栈的情况数后可用加法原则，由于k最后出栈，因此，在k入栈之前，比k小的值均出栈，此处情况有f(k-1)种，而之后比k大的值入栈，且都在k之前出栈，因此有f(n-k)种方式，由于比k小和比k大的值入栈出栈情况是相互独立的，此处可用乘法原则，f(n-k)*f(k-1)种，求和便是Catalan递归式。</p><p>还有一种分析<br>对于每一个数来说，必须进栈一次、出栈一次。我们把进栈设为状态‘1’，出栈设为状态‘0’。n个数的所有状态对应n个1和n个0组成的2n位二进制数。由于等待入栈的操作数按照1‥n的顺序排列、入栈的操作数b大于等于出栈的操作数a(a≤b)，因此输出序列的总数目=由左而右扫描由n个1和n个0组成的2n位二进制数，1的累计数不小于0的累计数的方案种数。<br>在2n位二进制数中填入n个1的方案数为c(2n,n),不填1的其余n位自动填0。从中减去不符合要求（由左而右扫描，0的累计数大于1的累计数）的方案数即为所求。<br><img src="/img/2018/1009/2018100901.jpg" alt="看着是很简单"><br>看图，其实就是问从A走到B有多少种走法（每次只能向右或向上走一个单位长度，就像对于栈只有进栈和出栈两种操作）</p><p>这个答案序列我们就把它称为Catalan数列，中文音译过来卡特兰，卡塔兰都行。</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>怎么得出卡特兰序列呢</p><p>令h(0)=1,h(1)=1，catalan数满足递推式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C(n)= C(0)*C(n-1)+C(1)*C(n-2)+...+C(n-1)*C(0) (n&gt;=2)</span><br></pre></td></tr></table></figure></p><p>不过有个更简单的式子，我一般用这个:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C(n)=C(n-1)*(4*n-2)/(n+1)</span><br></pre></td></tr></table></figure></p><p>第一个递推式很容易推出来，第二个我不知道怎么推的，可能是第一个式子的简化吧，我不知道。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>用到某些找规律题还是很舒服的，枚举前几个数，如果是1,2,5,14,42，要是我，我会毫不犹豫地敲卡特兰数列的。<br>今天就遇到这样一道题<br><img src="/img/2018/1009/2018100902.jpg" alt="我想起了一首中国风吉他曲《无题》"></p><p>100%的数据是T≤50000，n≤200000</p><p>很明显是道数论题，然后我直接就懵了，暴力都不会打，我想可能会有公式，然后我就尝试着推一推，（也是受noip2017小凯的疑惑影响才要推公式，以下是我的错误推论，怕被我误导的跳过这一点）我手推把第四项算出来是14，第五项是42，然后计算了一下第六项是146（正确的是132，我也没法检验对错啊）然后就有了下面的思路：<br><img src="/img/2018/1009/2018100903.jpg" alt="想想我推出来这个式子还挺不容易的"></p><p>看着是挺对的，之后我测试了题目给的大数据，就知道离爆零不远了</p><p>咳咳回归正题<br>其实这题的答案就是一个Catalan数列，对于要取模的数用费马小定理,再加上快速幂就行了，我把快速乘也加上了，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstdio&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">inline int <span class="built_in">read</span>()</span><br><span class="line">&#123;</span><br><span class="line">int nnn=1,numm=0;</span><br><span class="line">char ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!isdigit(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)nnn=-1;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(isdigit(ch))</span><br><span class="line">&#123;</span><br><span class="line">numm=(numm&lt;&lt;1)+(numm&lt;&lt;3)+ch-<span class="string">'0'</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> nnn*numm;</span><br><span class="line">&#125;</span><br><span class="line">const int p = 1000000007;</span><br><span class="line"></span><br><span class="line">long long quick(long long xt,long long yt)</span><br><span class="line">&#123;</span><br><span class="line">    long long summ=0;</span><br><span class="line">    <span class="keyword">while</span>(yt)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(yt&amp;1) summ=(summ+xt)%p;</span><br><span class="line">        xt=(xt+xt)%p;</span><br><span class="line">        yt&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> summ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">long long pow(long long ax,long long bx)</span><br><span class="line">&#123;</span><br><span class="line">    long long anss=1;</span><br><span class="line">    <span class="keyword">while</span>(bx)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(bx&amp;1) anss=quick(anss,ax)%p;//ans=ans*a%p;</span><br><span class="line">        ax=quick(ax,ax)%p;//a=a*a%p;</span><br><span class="line">        bx&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> anss;</span><br><span class="line">&#125;</span><br><span class="line">long long w[200005];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">freopen(<span class="string">"notitle.in"</span>,<span class="string">"r"</span>,stdin);</span><br><span class="line">freopen(<span class="string">"notitle.out"</span>,<span class="string">"w"</span>,stdout);</span><br><span class="line">long long xx;</span><br><span class="line">w[1]=1;</span><br><span class="line"><span class="keyword">for</span>(register int i=2;i&lt;=200003;++i)</span><br><span class="line">&#123;</span><br><span class="line">xx=pow(i+1,p-2);</span><br><span class="line">w[i]=quick(w[i-1],quick((4*i-2),xx))%p;</span><br><span class="line">&#125;</span><br><span class="line">int t=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(register int i=1;i&lt;=t;++i)</span><br><span class="line">cout&lt;&lt;w[<span class="built_in">read</span>()]&lt;&lt;endl;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>某学长以前提到过Catalan数列，当时没细讲，我觉得没有那么重要，所以就没太在意。<br>Catalan数列还是很有用的，这道题拉了我不少分，以后再见到答案是Catalan数列的题就不会轻易放过了。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道为啥，总觉得数论很难，而noip2017的day1 t1给了我很大的心里阴影&lt;br&gt;不管怎么样，也不能不管数论啊。。。&lt;/p&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;首先，什么是卡特兰数呢&lt;br&gt;&lt;img src=&quot;/img/2018/1009/神奇海螺.jpg&quot; alt=&quot;估计也就神奇海螺会数论了吧。。&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="数论" scheme="http://FanCYu.coding.me/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>加速——快速幂</title>
    <link href="http://FanCYu.coding.me/2018/09/26/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>http://FanCYu.coding.me/2018/09/26/快速幂/</id>
    <published>2018-09-26T13:00:00.000Z</published>
    <updated>2018-10-09T10:41:57.268Z</updated>
    
    <content type="html"><![CDATA[<p>可能我的码风有些奇特吧。。。<br>可我觉得挺好的呀</p><h3 id="快速幂-快速乘"><a href="#快速幂-快速乘" class="headerlink" title="快速幂+快速乘"></a>快速幂+快速乘</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const int p = 1000000007;</span><br><span class="line"></span><br><span class="line">long long quick(long long xt,long long yt)</span><br><span class="line">&#123;</span><br><span class="line">    long long summ=0;</span><br><span class="line">    <span class="keyword">while</span>(yt)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(yt&amp;1) summ=(summ+xt)%p;</span><br><span class="line">        xt=(xt+xt)%p;</span><br><span class="line">        yt&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> summ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">long long pow(long long ax,long long bx)</span><br><span class="line">&#123;</span><br><span class="line">    long long anss=1;</span><br><span class="line">    <span class="keyword">while</span>(bx)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(bx&amp;1) anss=quick(anss,ax);//ans=ans*a%p;</span><br><span class="line">        ax=quick(ax,ax);//a=a*a%p;</span><br><span class="line">        bx&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> anss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可能我的码风有些奇特吧。。。&lt;br&gt;可我觉得挺好的呀&lt;/p&gt;
&lt;h3 id=&quot;快速幂-快速乘&quot;&gt;&lt;a href=&quot;#快速幂-快速乘&quot; class=&quot;headerlink&quot; title=&quot;快速幂+快速乘&quot;&gt;&lt;/a&gt;快速幂+快速乘&lt;/h3&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="优化" scheme="http://FanCYu.coding.me/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>求单源最短路——Dijkstra</title>
    <link href="http://FanCYu.coding.me/2018/09/02/Dijkstra/"/>
    <id>http://FanCYu.coding.me/2018/09/02/Dijkstra/</id>
    <published>2018-09-02T14:00:00.000Z</published>
    <updated>2018-09-21T13:22:54.532Z</updated>
    
    <content type="html"><![CDATA[<p>迪科斯彻算法使用了广度优先搜索解决赋权有向图或者无向图的单源最短路径问题，算法最终得到一个最短路径树。该算法常用于路由算法或者作为其他图算法的一个子模块。</p><h3 id="算法的思路"><a href="#算法的思路" class="headerlink" title="算法的思路"></a>算法的思路</h3><p>Dijkstra算法采用的是一种贪心的策略，声明一个数组dis来保存源点到各个顶点的最短距离和一个保存已经找到了最短路径的顶点的集合：T，初始时，原点 s 的路径权重被赋为 0 （dis[s] = 0）。若对于顶点 s 存在能直接到达的边（s,m），则把dis[m]设为w（s, m）,同时把所有其他（s不能直接到达的）顶点的路径长度设为无穷大。初始时，集合T只有顶点s。<br><a id="more"></a><br>然后，从dis数组选择最小值，则该值就是源点s到该值对应的顶点的最短路径，并且把该点加入到T中，OK，此时完成一个顶点，<br>然后，我们需要看看新加入的顶点是否可以到达其他顶点并且看看通过该顶点到达其他点的路径长度是否比源点直接到达短，如果是，那么就替换这些顶点在dis中的值。<br>然后，又从dis中找出最小值，重复上述动作，直到T中包含了图的所有顶点。</p><h2 id="示例演示"><a href="#示例演示" class="headerlink" title="示例演示"></a>示例演示</h2><p>下面我求下图，从顶点v1到其他各个顶点的最短路径<br><img src="/img/2018/0902/201809021.png" alt="整个图"><br>首先第一步，我们先声明一个dis数组，该数组初始化的值为：<br><img src="/img/2018/0902/201809022.png" alt="第一步"><br>我们的顶点集T的初始化为：T={v1}<br>既然是求 v1顶点到其余各个顶点的最短路程，那就先找一个离 1 号顶点最近的顶点。通过数组 dis 可知当前离v1顶点最近是 v3顶点。当选择了 2 号顶点后，dis[2]（下标从0开始）的值就已经从“估计值”变为了“确定值”，即 v1顶点到 v3顶点的最短路程就是当前 dis[2]值。将V3加入到T中。<br>为什么呢？因为目前离 v1顶点最近的是 v3顶点，并且这个图所有的边都是正数，那么肯定不可能通过第三个顶点中转，使得 v1顶点到 v3顶点的路程进一步缩短了。因为 v1顶点到其它顶点的路程肯定没有 v1到 v3顶点短.<br>OK，既然确定了一个顶点的最短路径，下面我们就要根据这个新入的顶点V3会有出度，发现以v3 为弧尾的有： &lt; v3,v4 &gt;,那么我们看看路径：v1–v3–v4的长度是否比v1–v4短，其实这个已经是很明显的了，因为dis[3]代表的就是v1–v4的长度为无穷大，而v1–v3–v4的长度为：10+50=60，所以更新dis[3]的值,得到如下结果：<br><img src="/img/2018/0902/201809023.png" alt="第二步"><br>因此 dis[3]要更新为 60。这个过程有个专业术语叫做“松弛”。即 v1顶点到 v4顶点的路程即 dis[3]，通过 &lt; v3,v4&gt; 这条边松弛成功。这便是 Dijkstra 算法的主要思想：通过“边”来松弛v1顶点到其余各个顶点的路程。<br>然后，我们又从除dis[2]和dis[0]外的其他值中寻找最小值，发现dis[4]的值最小，通过之前是解释的原理，可以知道v1到v5的最短距离就是dis[4]的值，然后，我们把v5加入到集合T中，然后，考虑v5的出度是否会影响我们的数组dis的值，v5有两条出度：&lt; v5,v4&gt;和 &lt; v5,v6&gt;,然后我们发现：v1–v5–v4的长度为：50，而dis[3]的值为60，所以我们要更新dis[3]的值.另外，v1-v5-v6的长度为：90，而dis[5]为100，所以我们需要更新dis[5]的值。更新后的dis数组如下图:<br><img src="/img/2018/0902/201809023.png" alt="第三步"><br>然后，继续从dis中选择未确定的顶点的值中选择一个最小的值，发现dis[3]的值是最小的，所以把v4加入到集合T中，此时集合T={v1,v3,v5,v4},然后，考虑v4的出度是否会影响我们的数组dis的值，v4有一条出度：&lt; v4,v6&gt;,然后我们发现：v1–v5–v4–v6的长度为：60，而dis[5]的值为90，所以我们要更新dis[5]的值，更新后的dis数组如下图：<br><img src="/img/2018/0902/201809024.png" alt="第四步"><br>然后，我们使用同样原理，分别确定了v6和v2的最短路径，最后dis的数组的值如下：<br><img src="/img/2018/0902/201809025.png" alt="第五步"><br>因此，从图中，我们可以发现v1-v2的值为：∞，代表没有路径从v1到达v2。所以我们得到的最后的结果为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">起点  终点    最短路径    长度</span><br><span class="line">v1    v2     无          ∞    </span><br><span class="line">      v3     &#123;v1,v3&#125;    10</span><br><span class="line">      v4     &#123;v1,v5,v4&#125;  50</span><br><span class="line">      v5     &#123;v1,v5&#125;    30</span><br><span class="line">      v6     &#123;v1，v5,v4,v6&#125; 60</span><br></pre></td></tr></table></figure></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>利用邻接表和stl堆优化，我们可以把时间复杂度优化到O(NlogM),以下是用邻接表和stl堆优化来优化这个算法的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># include &lt;queue&gt;</span></span><br><span class="line"><span class="comment"># include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment"># include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment"># include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment"># include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long ll;</span><br><span class="line">typedef unsigned long long ull;</span><br><span class="line">typedef long double ld;</span><br><span class="line"></span><br><span class="line">const int M = 5e5 + 10;</span><br><span class="line">const int mod = 1e9 + 7;</span><br><span class="line"></span><br><span class="line">int n, m, S;</span><br><span class="line"></span><br><span class="line">int head[M], nxt[M], to[M], w[M], tot = 0;</span><br><span class="line"></span><br><span class="line">inline void add(int u, int v, int _w) &#123;</span><br><span class="line">++tot; nxt[tot] = head[u]; head[u] = tot; to[tot] = v; w[tot] = _w;</span><br><span class="line">&#125;</span><br><span class="line">inline void adde(int u, int v, int _w) &#123;</span><br><span class="line">add(u, v, _w), add(v, u, _w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">int w, v;</span><br><span class="line"><span class="function"><span class="title">node</span></span>() &#123;&#125;</span><br><span class="line">node(int w, int v) : w(w), v(v) &#123;&#125;</span><br><span class="line">friend bool operator &lt; (node a, node b) &#123;</span><br><span class="line"><span class="built_in">return</span> a.w &gt; b.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line">int dis[M];</span><br><span class="line">bool vis[M];</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; S;</span><br><span class="line"><span class="keyword">for</span> (int i=1, u, v, _w; i&lt;=m; ++i) &#123;</span><br><span class="line">scanf(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;_w);</span><br><span class="line">add(u, v, _w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (int i=1; i&lt;=n; ++i) dis[i] = 1e9, vis[i] = 0;</span><br><span class="line">dis[S] = 0; q.push(node(0, S));</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">node tp = q.top(); q.pop(); vis[tp.v] = 1;</span><br><span class="line"><span class="keyword">for</span> (int i=head[tp.v]; i; i=nxt[i]) &#123;</span><br><span class="line"><span class="keyword">if</span>(dis[to[i]] &gt; dis[tp.v] + w[i]) &#123;</span><br><span class="line">dis[to[i]] = dis[tp.v] + w[i];</span><br><span class="line">q.push(node(dis[to[i]], to[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (int i=1; i&lt;=n; ++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>, dis[i] == 1e9 ? 2147483647 : dis[i]);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面这个是只利用邻接表，没有堆优化的代码，时间复杂度是O(n(n+m))，不理解算法的话先看下面这个理解一下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">#include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">#include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">#include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">#define mem(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line">using namespace std;</span><br><span class="line">const int inf=0x3f3f3f3f;</span><br><span class="line">int u[10],v[10],w[10],first[10],next[10],dist[10],vis[10],n,m,k,minn;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    //初始化</span><br><span class="line">    <span class="keyword">for</span>(int i=1; i&lt;=n; i++)</span><br><span class="line">        first[i]=-1;</span><br><span class="line">    //读入边</span><br><span class="line">    mem(dist,inf);</span><br><span class="line">    <span class="keyword">for</span>(int i=1; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(<span class="string">"%d%d%d"</span>,&amp;u[i],&amp;v[i],&amp;w[i]);</span><br><span class="line">        next[i]=first[u[i]];</span><br><span class="line">        first[u[i]]=i;</span><br><span class="line">        <span class="keyword">if</span>(u[i]==1)</span><br><span class="line">            dist[v[i]]=w[i];//初始化dis数组，表示1号顶点到其余各个顶点的最短路程</span><br><span class="line">    &#125;</span><br><span class="line">    //初始化vis</span><br><span class="line">    <span class="keyword">for</span>(int i=1; i&lt;=n; i++)</span><br><span class="line">        vis[i]=0;</span><br><span class="line">    vis[1]=1;//标记起始点1已经被访问过</span><br><span class="line">    dist[1]=0;</span><br><span class="line">    //迪杰斯特拉算法(Dijkstra)的核心内容</span><br><span class="line">    <span class="keyword">for</span>(int i=1; i&lt;=n-1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        minn=inf;</span><br><span class="line">        <span class="keyword">for</span>(int j=1; j&lt;=n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j]==0&amp;&amp;dist[j]&lt;minn)</span><br><span class="line">            &#123;</span><br><span class="line">                minn=dist[j];</span><br><span class="line">                k=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[k]=1;</span><br><span class="line">        <span class="keyword">for</span>(int l=first[k]; l!=-1; l=next[l])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(w[l]&lt;inf)</span><br><span class="line">                <span class="keyword">if</span>(dist[k]+w[l]&lt;dist[v[l]])</span><br><span class="line">                    dist[v[l]]=dist[k]+w[l];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=1; i&lt;=n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,dist[i]);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>迪杰斯特拉可以说是图论中求单源最短路最优的算法了(求全图最短路用弗洛里德除外)，所以同志们一定要掌握好这个算法  <del>早日放弃SPFA和Floyd吧</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迪科斯彻算法使用了广度优先搜索解决赋权有向图或者无向图的单源最短路径问题，算法最终得到一个最短路径树。该算法常用于路由算法或者作为其他图算法的一个子模块。&lt;/p&gt;
&lt;h3 id=&quot;算法的思路&quot;&gt;&lt;a href=&quot;#算法的思路&quot; class=&quot;headerlink&quot; title=&quot;算法的思路&quot;&gt;&lt;/a&gt;算法的思路&lt;/h3&gt;&lt;p&gt;Dijkstra算法采用的是一种贪心的策略，声明一个数组dis来保存源点到各个顶点的最短距离和一个保存已经找到了最短路径的顶点的集合：T，初始时，原点 s 的路径权重被赋为 0 （dis[s] = 0）。若对于顶点 s 存在能直接到达的边（s,m），则把dis[m]设为w（s, m）,同时把所有其他（s不能直接到达的）顶点的路径长度设为无穷大。初始时，集合T只有顶点s。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="图论" scheme="http://FanCYu.coding.me/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="单源最短路" scheme="http://FanCYu.coding.me/tags/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>加速——卡常</title>
    <link href="http://FanCYu.coding.me/2018/08/22/%E5%8D%A1%E5%B8%B8%E5%8A%A0%E9%80%9F/"/>
    <id>http://FanCYu.coding.me/2018/08/22/卡常加速/</id>
    <published>2018-08-22T10:06:02.000Z</published>
    <updated>2018-09-26T13:04:18.405Z</updated>
    
    <content type="html"><![CDATA[<p>代码中加速非常重要 <del>废话</del><br>然而我入坑了才意识到</p><h2 id="首先是应付卡常的加速"><a href="#首先是应付卡常的加速" class="headerlink" title="首先是应付卡常的加速"></a>首先是应付卡常的加速</h2><h3 id="jzyzOJ-1295"><a href="#jzyzOJ-1295" class="headerlink" title="jzyzOJ 1295"></a>jzyzOJ 1295</h3><p>通过这道题我终于体会到了输入输出优化的重要性。。。<br>其实主要就是快读<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstring&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cmath&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int a[3000][3000]=&#123;&#125;;</span><br><span class="line">int f[3000][3000]=&#123;&#125;;</span><br><span class="line">int Up[3000][3000]=&#123;&#125;;</span><br><span class="line">int Right[3000][3000]=&#123;&#125;;</span><br><span class="line">int Left[3000][3000]=&#123;&#125;;</span><br><span class="line">inline int <span class="built_in">read</span>()</span><br><span class="line">&#123;</span><br><span class="line">int n=1,num=0;</span><br><span class="line">char ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!isdigit(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)n=-1;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(isdigit(ch))</span><br><span class="line">&#123;</span><br><span class="line">num=(num&lt;&lt;1)+(num&lt;&lt;3)+ch-<span class="string">'0'</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> n*num;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,m,ans=0;</span><br><span class="line">    n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(register int i=1;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(register int j=1;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line">a[i][j]=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==0)</span><br><span class="line">&#123;</span><br><span class="line">Up[i+1][j]=Up[i][j]+1;</span><br><span class="line">Left[i][j+1]=Left[i][j]+1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(register int i=1;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(register int j=m;j&gt;=1;--j)</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==0)</span><br><span class="line">Right[i][j-1]=Right[i][j]+1;</span><br><span class="line"><span class="keyword">for</span>(register int i=1;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(register int j=1;j&lt;=m;++j)</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==1)</span><br><span class="line">&#123;</span><br><span class="line">f[i][j]=min(f[i-1][j-1],Left[i][j]);</span><br><span class="line">f[i][j]=min(f[i][j],Up[i][j])+1;</span><br><span class="line">ans=max(ans,f[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">memset(f,0,sizeof(f));</span><br><span class="line">    <span class="keyword">for</span>(register int i=1;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(register int j=m;j&gt;=1;--j)</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==1)</span><br><span class="line">&#123;</span><br><span class="line">f[i][j]=min(f[i-1][j+1],Right[i][j]);</span><br><span class="line">f[i][j]=min(f[i][j],Up[i][j])+1;</span><br><span class="line">ans=max(ans,f[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>题目贴出来。。<br><img src="/img/2018/0823/201808233.jpg" alt="一道大水题"></p><p>这个是只用流输入输出的优化<br><img src="/img/2018/0823/201808231.jpg" alt="欲哭无泪"><br><del>这道题给我这个教训以前，我曾以为这个优化很牛逼</del></p><p>这个是前面贴出代码的效果<br><img src="/img/2018/0823/201808232.jpg" alt="快了五倍"></p><h3 id="其他优化日后更新-相信我"><a href="#其他优化日后更新-相信我" class="headerlink" title="其他优化日后更新 相信我"></a>其他优化日后更新 <del>相信我</del></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码中加速非常重要 &lt;del&gt;废话&lt;/del&gt;&lt;br&gt;然而我入坑了才意识到&lt;/p&gt;
&lt;h2 id=&quot;首先是应付卡常的加速&quot;&gt;&lt;a href=&quot;#首先是应付卡常的加速&quot; class=&quot;headerlink&quot; title=&quot;首先是应付卡常的加速&quot;&gt;&lt;/a&gt;首先是应付卡常的加速&lt;/h2&gt;&lt;h3 id=&quot;jzyzOJ-1295&quot;&gt;&lt;a href=&quot;#jzyzOJ-1295&quot; class=&quot;headerlink&quot; title=&quot;jzyzOJ 1295&quot;&gt;&lt;/a&gt;jzyzOJ 1295&lt;/h3&gt;&lt;p&gt;通过这道题我终于体会到了输入输出优化的重要性。。。&lt;br&gt;其实主要就是快读&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="优化" scheme="http://FanCYu.coding.me/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>求单源最短路——SPFA</title>
    <link href="http://FanCYu.coding.me/2018/08/12/SPFA/"/>
    <id>http://FanCYu.coding.me/2018/08/12/SPFA/</id>
    <published>2018-08-12T10:06:02.000Z</published>
    <updated>2018-10-09T10:47:06.554Z</updated>
    
    <content type="html"><![CDATA[<p>SPFA好像被证明出是错的，再加上复杂度并不是很优，所以个人推荐用Dijkstra求单源最短路<br><a href="https://fancyu.coding.me/2018/09/02/Dijkstra/">传送门</a></p><p>什么是SPFA算法呢？<br>设立一个先进先出的队列q用来保存待优化的结点，优化时每次取出队首结点u，并且用u点当前的最短路径估计值对离开u点所指向的结点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾。这样不断从队列中取出结点来进行松弛操作，直至队列空为止。<br><a id="more"></a><br>松弛操作的原理是著名的定理：“三角形两边之和大于第三边”，在信息学中我们叫它三角不等式。所谓对结点i,j进行松弛，就是判定是否dis[j]&gt;dis[i]+w[i,j]，如果该式成立则将dis[j]减小到dis[i]+w[i,j]，否则不动。</p><h2 id="和广搜bfs的区别："><a href="#和广搜bfs的区别：" class="headerlink" title="和广搜bfs的区别："></a>和广搜bfs的区别：</h2><p>SPFA 在形式上和广度(宽度)优先搜索非常类似，不同的是bfs中一个点出了队列就不可能重新进入队列，但是SPFA中一个点可能在出队列之后再次被放入队列，也就是一个点改进过其它的点之后，过了一段时间可能本身被改进(重新入队)，于是再次用来改进其它的点，这样反复迭代下去。</p><h2 id="算法描述："><a href="#算法描述：" class="headerlink" title="算法描述："></a>算法描述：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void  spfa(s);  //求单源点s到其它各顶点的最短距离</span><br><span class="line">    <span class="keyword">for</span> i=1 to n <span class="keyword">do</span> &#123; dis[i]=∞; vis[i]=<span class="literal">false</span>; &#125;   //初始化每点到s的距离，不在队列</span><br><span class="line">    dis[s]=0;  //将dis[源点]设为0</span><br><span class="line">    vis[s]=<span class="literal">true</span>; //源点s入队列</span><br><span class="line">    head=0; tail=1; q[tail]=s; //源点s入队, 头尾指针赋初值</span><br><span class="line">    <span class="keyword">while</span> head&lt;tail <span class="keyword">do</span> &#123;</span><br><span class="line">       head+1;  //队首出队</span><br><span class="line">       v=q[head];  //队首结点v</span><br><span class="line">       vis[v]=<span class="literal">false</span>;  //释放对v的标记，可以重新入队</span><br><span class="line">       <span class="keyword">for</span> 每条边(v,i)  //对于与队首v相连的每一条边</span><br><span class="line">    <span class="keyword">if</span> (dis[i]&gt;dis[v]+a[v][i])  //如果不满足三角形性质</span><br><span class="line"> dis[i] = dis[v] + a[v][i]   //松弛dis[i]</span><br><span class="line"><span class="keyword">if</span> (vis[i]=<span class="literal">false</span>) &#123;tail+1; q[tail]=i; vis[i]=<span class="literal">true</span>;&#125; //不在队列，则加入队列</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SPFA好像被证明出是错的，再加上复杂度并不是很优，所以个人推荐用Dijkstra求单源最短路&lt;br&gt;&lt;a href=&quot;https://fancyu.coding.me/2018/09/02/Dijkstra/&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;什么是SPFA算法呢？&lt;br&gt;设立一个先进先出的队列q用来保存待优化的结点，优化时每次取出队首结点u，并且用u点当前的最短路径估计值对离开u点所指向的结点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾。这样不断从队列中取出结点来进行松弛操作，直至队列空为止。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="图论" scheme="http://FanCYu.coding.me/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="单源最短路" scheme="http://FanCYu.coding.me/tags/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo的主题</title>
    <link href="http://FanCYu.coding.me/2018/08/01/%E5%85%B3%E4%BA%8Ehexo%E7%9A%84%E4%B8%BB%E9%A2%98/"/>
    <id>http://FanCYu.coding.me/2018/08/01/关于hexo的主题/</id>
    <published>2018-08-01T10:06:02.000Z</published>
    <updated>2018-09-04T14:00:00.887Z</updated>
    
    <content type="html"><![CDATA[<p>这里有个网站，推荐了几个不错的主题，还有预览<br><a href="https://www.jianshu.com/p/bcdbe7347c8d" target="_blank" rel="noopener">click here</a><br><a id="more"></a><br>有两个我很喜欢<br><a href="http://litten.me/" target="_blank" rel="noopener">yilia</a><br><a href="http://louisbarranqueiro.github.io/hexo-theme-tranquilpeak/" target="_blank" rel="noopener">Tranquilpeak</a><br>初步打算弄成yilia<br>然后配置yilia主题的步骤在这里<br><a href="http://www.lookk.cn/2017/12/08/hexo-%E9%85%8D%E7%BD%AEyilia%E4%B8%BB%E9%A2%98/" target="_blank" rel="noopener">click here</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里有个网站，推荐了几个不错的主题，还有预览&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/bcdbe7347c8d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;click here&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo的一些操作</title>
    <link href="http://FanCYu.coding.me/2018/08/01/hexo%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>http://FanCYu.coding.me/2018/08/01/hexo的一些操作/</id>
    <published>2018-08-01T10:06:02.000Z</published>
    <updated>2018-09-21T13:43:05.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>我找到了两个网站</p><p><a href="https://blog.csdn.net/Zhangxiaorui_9/article/details/79723288" target="_blank" rel="noopener">click here</a></p><p><a href="https://blog.csdn.net/dxxzst/article/details/76135750" target="_blank" rel="noopener">click here</a><br><a id="more"></a><br>不过都看不懂。。<br>最后这个详细点<br><a href="https://blog.csdn.net/wxl1555/article/details/79293159" target="_blank" rel="noopener">click here</a></p><h2 id="插入媒体"><a href="#插入媒体" class="headerlink" title="插入媒体"></a>插入媒体</h2><p>可以插入图片，音乐，视频<br><a href="https://blog.csdn.net/qq_26891045/article/details/51693571" target="_blank" rel="noopener">click here</a></p><h2 id="这个厉害"><a href="#这个厉害" class="headerlink" title="这个厉害"></a>这个厉害</h2><p><a href="https://www.cnblogs.com/jarson-7426/p/5515870.html" target="_blank" rel="noopener">click here</a></p><h2 id="相册功能"><a href="#相册功能" class="headerlink" title="相册功能"></a>相册功能</h2><p>看起来好难弄<br><a href="https://zlwis.vip/2016/01/17/hexo%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/#more" target="_blank" rel="noopener">click here</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;迁移&quot;&gt;&lt;a href=&quot;#迁移&quot; class=&quot;headerlink&quot; title=&quot;迁移&quot;&gt;&lt;/a&gt;迁移&lt;/h2&gt;&lt;p&gt;我找到了两个网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Zhangxiaorui_9/article/details/79723288&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;click here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/dxxzst/article/details/76135750&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;click here&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello the cruel world!</title>
    <link href="http://FanCYu.coding.me/2018/07/31/Hello%20the%20cruel%20world!/"/>
    <id>http://FanCYu.coding.me/2018/07/31/Hello the cruel world!/</id>
    <published>2018-07-31T11:06:02.000Z</published>
    <updated>2018-09-21T13:42:58.543Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/2018/life.jpg" alt="Life is colorfull,Do you agree?"></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=3882876&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/2018/life.jpg&quot; alt=&quot;Life is colorfull,Do you agree?&quot;&gt;&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight
      
    
    </summary>
    
    
  </entry>
  
</feed>
