<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凉城听暖</title>
  
  <subtitle>Do What You Love，Love What You Do</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://FanCYu.coding.me/"/>
  <updated>2018-10-17T10:26:16.729Z</updated>
  <id>http://FanCYu.coding.me/</id>
  
  <author>
    <name>凉城听暖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实用的网站</title>
    <link href="http://FanCYu.coding.me/2018/10/17/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>http://FanCYu.coding.me/2018/10/17/实用工具/</id>
    <published>2018-10-17T08:00:00.000Z</published>
    <updated>2018-10-17T10:26:16.729Z</updated>
    
    <content type="html"><![CDATA[<p>这里盘点一些博主收集的几个很不错的网站。<br>对程序员来说真的能省掉许多不必要的功夫。<br><em>我真的不是在打广告，没有任何人给我钱的。</em></p><h3 id="图论构图"><a href="#图论构图" class="headerlink" title="图论构图"></a>图论构图</h3><p><a href="https://csacademy.com/app/graph_editor/" target="_blank" rel="noopener">传送门</a><br>PS:这是个歪果网站，所以翻墙食用更佳。</p><p>操作简单，对于图论画图这方面非常非常非常好用。<br><del>也挺好玩的</del><br><a id="more"></a><br>预览:<br><img src="/img/2018/1017/2018101701.jpg" alt="鼠标左键点击一个点可以把它固定，不让它乱跑"></p><h3 id="数论公式-amp-amp-函数图像"><a href="#数论公式-amp-amp-函数图像" class="headerlink" title="数论公式&amp;&amp;函数图像"></a>数论公式&amp;&amp;函数图像</h3><p><a href="https://www.wolframalpha.com/" target="_blank" rel="noopener">传送门</a><br>PS:这也是个歪果网站，所以翻墙食用更佳。</p><p>这个网站是真的强大。<br>对于一个函数呢，它能给你变形和它的几组解，还能把图像给你画出来。<br>对于一个数列呢，它能往后给出好多项，还能把通项公式告诉你。<br>除了这些，还会给你一大堆你看不懂的东西。<em>好吧，是我看不懂。</em><br><del>也是好玩又好用。</del></p><p>预览:<br>输入(x^2+y^2-1)^3-(x^2)*(y^3)=0<br><img src="/img/2018/1017/2018101702.jpg" alt="小心心~"></p><p>输入Catalan数的前几项<br><img src="/img/2018/1017/2018101703.jpg" alt="输入卡特兰数的前几项会出来什么呢"></p><p>下面还有<br><img src="/img/2018/1017/2018101704.jpg" alt="虽然很多看不懂，但是就是感觉很强"></p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>目前博主手里也就这些<del>好玩</del>好用的网站。<em>真的没有更多了。</em><br>以后再发现其它<del>好玩</del>好用的网站呢，我一定会更新的。<br>所以，记得时不时来这里看一看哦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里盘点一些博主收集的几个很不错的网站。&lt;br&gt;对程序员来说真的能省掉许多不必要的功夫。&lt;br&gt;&lt;em&gt;我真的不是在打广告，没有任何人给我钱的。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;图论构图&quot;&gt;&lt;a href=&quot;#图论构图&quot; class=&quot;headerlink&quot; title=&quot;图论构图&quot;&gt;&lt;/a&gt;图论构图&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://csacademy.com/app/graph_editor/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;br&gt;PS:这是个歪果网站，所以翻墙食用更佳。&lt;/p&gt;
&lt;p&gt;操作简单，对于图论画图这方面非常非常非常好用。&lt;br&gt;&lt;del&gt;也挺好玩的&lt;/del&gt;&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="工具" scheme="http://FanCYu.coding.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>数学期望</title>
    <link href="http://FanCYu.coding.me/2018/10/15/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B/"/>
    <id>http://FanCYu.coding.me/2018/10/15/数学期望/</id>
    <published>2018-10-15T11:00:00.000Z</published>
    <updated>2018-10-17T14:02:07.237Z</updated>
    
    <content type="html"><![CDATA[<p>不知道这算不算数论的东西，不过我个人觉得挺简单的</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>什么是数学期望呢？<br>就是所有结果的概率乘该结果的值的总和。——沃·兹基硕德</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>有种神奇的东西叫做期望DP，用起来很简单，理解起来也很简单，不过对于下面这道例题，我更喜欢用一种更简单的方法。<br><a id="more"></a><br><img src="/img/2018/1015/2018101501.jpg" alt="真的不难"><br>100%的数据范围是n&lt;=1e7</p><p>看完题目有什么想法呢？我要先吐槽一下。题目是求一个期望值，所以答案一定是个小数，对小数取模要用到乘法逆元，所以结果是一个巨大无比的数，而只有n=2对应的答案是很小的，综上所述，样例没有什么用，也就是让大家理解题意而已了。</p><p>其实不是的，样例非常非常非常有用。</p><p>我先说说我的算法吧。<br>我这种写法对于这个题要有一定的逆向思维，我先正着讲，让你们理解一下。你们看完以后可以思考你们自己用这种方法写的话，思路的先后顺序是个什么样。</p><p>首先要弄懂样例的意思，n=2时答案的2是哪来的呢？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一次有0.5的概率跳到1，共跳了1次，所以值为0.5*1</span><br><span class="line">第二次有0.25的概率跳到1，共跳了2次，所以值为0.25*2</span><br><span class="line">第三次有0.5的概率跳到1，共跳了3次，所以值为0.125*3</span><br><span class="line">...</span><br><span class="line">所以n=2时，答案是0.5+0.25*2+0.125*3+.....</span><br><span class="line">一直加下去，答案就无限接近2</span><br></pre></td></tr></table></figure></p><p>对于这个样例，你原本就在2这个位置，那么我问大家一个问题：如果你是跳了1步到的2这个位置，那么答案是多少？如果你是跳了2步到的2这个位置，那么答案是多少？如果你是跳了x步到的2这个位置，那么答案是多少？<br>很显然，答案是2+x。<br>举个栗子吧，跳1步到2的时候，答案是0.5×2+0.25×3+0.125×4+….. ，比原来直接在2的答案多了0.5+0.25+0.125+…. ，多加的值无限趋近于1，所以跳1步到达2的答案就是3。为了验证这个结论，我还打了暴力试了一下呢。</p><p>我们再手推一下n=3的答案，因为n=2具有一定的迷惑性（非A则B，并且概率相同，不具有普遍性）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">第一次有1/3的概率跳到1，共跳了1次，所以值为1/3*1</span><br><span class="line">      有1/3的概率跳到2，共跳了1次，所以值为1/3*(2+1)</span><br><span class="line">      (这里就用到了刚刚我们推的结论，</span><br><span class="line">      跳了一步到2的答案为2+1，而一步跳到2的概率为1/3)</span><br><span class="line">第二次有（1/3）^2的概率跳到1，共跳了2次，所以值为(1/9)*2</span><br><span class="line">      有（1/3）^2的概率跳到2，共跳了2次，所以值为(1/9)*(2+2)</span><br><span class="line">第三次有（1/3）^3的概率跳到1，共跳了3次，所以值为(1/27)*3</span><br><span class="line">      有（1/3）^3的概率跳到2，共跳了3次，所以值为(1/27)*(2+3)</span><br><span class="line">...</span><br><span class="line">所以n=3时，答案是 1/3*1 +1/3*(2+1) +(1/9)*2 +(1/9)*(2+2)+(1/27)*3+(1/27)*(2+3)+.....</span><br><span class="line">化简一下： 1/3*(1+3) +(1/3)^2*(2+4) +(1/3)^3*(3+5) +.....</span><br><span class="line">一直加下去，答案就无限接近2.5（先不计算取模）</span><br></pre></td></tr></table></figure></p><p>现在大家应该明白了这种算法的真正思路，然后我们来推公式。<br>想想我们有什么条件，怕大家不懂，稍微啰嗦了一下，其实很简单。<br>共有n扇门。<br>因为上面的加法是一直加的，因为他可以一直跳下去，所以要算出准确答案，我们就设他跳了s次，s趋近于无穷大。（我也不知道怎么描述s，不明白s的含义的没关系，看到后面的公式就明白了，我只是想利用s表达求和式子的最后一项）<br>设答案为S。（相当于数列的前n项和，高中数学知识）<br>设t=1+3+3.5+…+S[n-1]。（这是一个递推的思想，因为计算第n项要用到前面推出的1~n-1的答案，我们先把这些答案都+1,不加也可以，不加的话后面的公式稍微变一下就行了，一样的，我们先把这些前面推出的答案都+1）<br>那么公式来了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">S=1/n*t +(1/n)^2*(t+n-1) +(1/n)^3*[t+2*(n-1)]+....  +(1/n)^s*(t+(s-1)*(n-1))</span><br><span class="line">这里用到了数列求和的错位相减法：标记上面等式为①，等号两边同时乘(1/n)得到②：</span><br><span class="line">(1/n)*S=(1/n)^2*t +(1/n)^3*(t+n-1) +(1/n)^4*[t+2*(n-1)]+...+(1/n)^(s+1)*[t+(s-1)*(n-1)]</span><br><span class="line">①-②再化简得：(n-1)/n *S=(1/n)*t+ (n-1)*[(1/n)^2+(1/n)^3+...(1/n)^s] -(1/n)^(s+1) *[t+(s-1)(n-1)]</span><br><span class="line">第一个中括号里是一个等比数列，对这个等比数列进行就和来化简：</span><br><span class="line">这个中括号里的值的分子=(1/n)^2 *(1-(1-n)^s)，</span><br><span class="line">因为s趋近于无穷大，所以(1-n)^s趋近于0，所以(1-(1-n)^s)趋近于1，所以分子就=(1/n)^2</span><br><span class="line">这个值的分母是1- 1/n，化简一下这个分数，最后中括号里的值是 1/ n(n-1)</span><br><span class="line">再回到整个式子：(n-1)/n *S=(1/n)*t + 1/ n(n-1) -(1/n)^(s+1) *[t+(s-1)(n-1)]</span><br><span class="line">再看一下减号后面的一堆内容，因为s趋近于正无穷，所以s+1也是正无穷，所以(1/n)^(s+1)=0，然后减号后面的一堆东西就没了。</span><br><span class="line">所以整个式子化简成了：(n-1)/n *S=(1/n)*t + 1/ n(n-1)</span><br><span class="line">再化简：S=(t+1)/(n-1)</span><br><span class="line">公式就成功推出来了。</span><br></pre></td></tr></table></figure></p><p>所以样例给的2可能就是给我们初始值让我们递推的。<br>代码实现就很简单了，从3开始计算，一直到n，每次更新t的值，对于模运算呢还要再加上线性求逆元，用快速幂的话只能拿70分。<a href="https://fancyu.coding.me/2018/09/26/%E5%BF%AB%E9%80%9F%E5%B9%82/">线性求逆元传送门</a></p><p>下面贴上我的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">#include&lt;ctime&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">inline int <span class="built_in">read</span>()</span><br><span class="line">&#123;</span><br><span class="line">int nnn=1,numm=0;</span><br><span class="line">char ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!isdigit(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)nnn=-1;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(isdigit(ch))</span><br><span class="line">&#123;</span><br><span class="line">numm=(numm&lt;&lt;1)+(numm&lt;&lt;3)+ch-<span class="string">'0'</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> nnn*numm;</span><br><span class="line">&#125;</span><br><span class="line">const int P=1000000007;</span><br><span class="line">long long n,ans,k=4,t,w,x,xx;</span><br><span class="line">long long inv[10000005];</span><br><span class="line">inline void init_inv()</span><br><span class="line">&#123;</span><br><span class="line">inv[1]=1;</span><br><span class="line"><span class="keyword">for</span>(register int i=2;i&lt;=n;++i)</span><br><span class="line">inv[i]=(P-P/i)*inv[P%i]%P;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">freopen(<span class="string">"life.in"</span>,<span class="string">"r"</span>,stdin);</span><br><span class="line">freopen(<span class="string">"life.out"</span>,<span class="string">"w"</span>,stdout);</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line">init_inv();</span><br><span class="line"><span class="keyword">if</span>(n==1)&#123;cout&lt;&lt;0;<span class="built_in">return</span> 0;&#125;</span><br><span class="line"><span class="keyword">if</span>(n==2)&#123;cout&lt;&lt;2;<span class="built_in">return</span> 0;&#125;</span><br><span class="line"><span class="keyword">for</span>(register int i=3;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">x=(k+1)*inv[i-1]%P;</span><br><span class="line">k+=x+1;</span><br><span class="line">k%=P;</span><br><span class="line"><span class="keyword">if</span>(i==n)</span><br><span class="line">ans=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实代码刚敲好我的心里是没底的，因为推数列的计算量不小，如果我哪一步稍有差错那么整道题就全WA了，因为我也不喜欢检查，这样容易晕，所以我每一步计算都要确认好几遍。直到mdb同学推出了一个跟我不同的公式，（其实跟我的一样，形式不同罢了）跟我对答案发现结果一样的时候，我感觉才稳了一点。</p><p>其实这道题的正解是期望DP，也不难，不过我更喜欢我这一种<br>下面是这道题的正解：<br><img src="/img/2018/1015/2018101502.jpg" alt="不要为常规思维所限制"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我的算法讲完了，代码也贴出来了，我前面有说过，我是顺着讲的，如果没有真正理解，你自己写是写不出来的，所以大家要试着理解我为什么要先算这些东西。<br>其实也没什么，先弄懂样例（为什么n=2时，答案为2），类比具有普遍特征的数（手推n=3的情况），然后意识到要用前面的答案（有概率跳到一个点再从这个点到1），然后研究怎么用前面的答案（第x步跳到某个点，那就是x+该点的期望值），接着推公式，然后化简，就这样就搞定了。</p><p>对于数学期望的题，基本上全都可以用期望DP来写，但是有不少题都可以推公式，而且能推公式的题基本都跟这道题差不多，知识点只需要高中关于数列的知识就行了（逆元无论什么算法都是必要的），那么对于不擅长DP、不喜欢DP的同学呢，这种方法是你很好的选择。<br>但是有的数学期望题不能推公式，特别是那种输入不是简简单单的一个数，而是某个场景的数据的题，就比如NOIP2016的换教室，像那种题一看就知道推公式不可行。<br>我不敢保证每道输入简单的数学期望题都可以推公式，但是遇到那种数学期望题不妨试着推一推，都是一些数列的东西，推着难度也不大，思路清晰是必要的，而思路清晰以后推公式也用不了多长时间，对吧？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道这算不算数论的东西，不过我个人觉得挺简单的&lt;/p&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;什么是数学期望呢？&lt;br&gt;就是所有结果的概率乘该结果的值的总和。——沃·兹基硕德&lt;/p&gt;
&lt;h2 id=&quot;例题&quot;&gt;&lt;a href=&quot;#例题&quot; class=&quot;headerlink&quot; title=&quot;例题&quot;&gt;&lt;/a&gt;例题&lt;/h2&gt;&lt;p&gt;有种神奇的东西叫做期望DP，用起来很简单，理解起来也很简单，不过对于下面这道例题，我更喜欢用一种更简单的方法。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="例题" scheme="http://FanCYu.coding.me/tags/%E4%BE%8B%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树——Prim</title>
    <link href="http://FanCYu.coding.me/2018/10/12/Prim/"/>
    <id>http://FanCYu.coding.me/2018/10/12/Prim/</id>
    <published>2018-10-12T09:00:00.000Z</published>
    <updated>2018-10-12T13:10:08.301Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>首先，最小生成树是一副连通加权无向图中一棵权值最小的生成树。<del>废话</del><br>其次，Prim算法于1930年由捷克数学家沃伊捷赫·亚尔尼克（英语：Vojtěch Jarník）发现；并在1957年由美国计算机科学家罗伯特·普里姆（英语：Robert C. Prim）独立发现；1959年，艾兹格·迪科斯彻再次发现了该算法。因此，在某些场合，普里姆算法又被称为DJP算法、亚尔尼克算法或普里姆－亚尔尼克算法。<del>这一小段粘自百度百科</del><br><del>真的没啥可说的</del></p><h2 id="算法的思路"><a href="#算法的思路" class="headerlink" title="算法的思路"></a>算法的思路</h2><p><del>我真的不想多说，跟Dijkstra一个样</del><br><a href="https://fancyu.coding.me/2018/09/02/Dijkstra/">Dijkstra</a><br><a id="more"></a><br>Dijkstra记录距离的数组更新查找的是所有点到源点的距离，而Prim记录距离的数组更新查找的是所有点到 源点已经连接到的点的距离.<br>而且这两种算法每次往堆里添加的都是 所有已连接点 所能到达的所有边，并且都是每个点只能到达一次，总之，除了上面那一段讲述的 更新查找的东西不同以外，其余的一模一样。</p><p>值得一提的一点：一定一定记得用堆优化，不用堆的话时间复杂度非常吓人。</p><p>下面给出来一个步骤演示<br><img src="/img/2018/1012/2018101201.png" alt="Prim步骤演示"></p><p>具体实现方法就不再啰嗦了，懂Dijkstra的看完上面一段一定能懂Prim，下面只贴出代码。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>细心的同学可以发现，连代码都跟Dijkstra差不了多少<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># include &lt;queue&gt;</span></span><br><span class="line"><span class="comment"># include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment"># include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment"># include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment"># include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long ll;</span><br><span class="line">typedef unsigned long long ull;</span><br><span class="line">typedef long double ld;</span><br><span class="line"></span><br><span class="line">const int M = 5e5 + 10;</span><br><span class="line">const int mod = 1e9 + 7;</span><br><span class="line"></span><br><span class="line">int n, m;</span><br><span class="line"></span><br><span class="line">int head[M], nxt[M], to[M], w[M], tot = 0;</span><br><span class="line"></span><br><span class="line">inline void add(int u, int v, int _w) &#123;</span><br><span class="line">++tot; nxt[tot] = head[u]; head[u] = tot; to[tot] = v; w[tot] = _w;</span><br><span class="line">&#125;</span><br><span class="line">inline void adde(int u, int v, int _w) &#123;</span><br><span class="line">add(u, v, _w), add(v, u, _w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct node &#123;</span><br><span class="line">int w, v;</span><br><span class="line"><span class="function"><span class="title">node</span></span>() &#123;&#125;</span><br><span class="line">node(int w, int v) : w(w), v(v) &#123;&#125;</span><br><span class="line">friend bool operator &lt;(node a, node b) &#123;</span><br><span class="line"><span class="built_in">return</span> a.w &gt; b.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool vis[M];</span><br><span class="line">priority_queue &lt;struct node&gt; q;</span><br><span class="line"></span><br><span class="line">inline int <span class="function"><span class="title">prim</span></span>() &#123;</span><br><span class="line">int ans = 0;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">vis[1] = 1;</span><br><span class="line"><span class="keyword">for</span> (int i=head[1]; i; i=nxt[i]) q.push(node(w[i], to[i]));</span><br><span class="line"><span class="keyword">for</span> (int e=1; e&lt;n; ++e) &#123;</span><br><span class="line">node tp = q.top(); q.pop();</span><br><span class="line"><span class="keyword">while</span>(vis[tp.v]) &#123;</span><br><span class="line">tp = q.top();</span><br><span class="line">q.pop();</span><br><span class="line">&#125;</span><br><span class="line">vis[tp.v] = 1; ans += tp.w;</span><br><span class="line"><span class="keyword">for</span> (int i=head[tp.v]; i; i=nxt[i]) <span class="keyword">if</span>(!vis[to[i]]) q.push(node(w[i], to[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (int i=1, u, v, _w; i&lt;=m; ++i) &#123;</span><br><span class="line">scanf(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;_w);</span><br><span class="line">adde(u, v, _w);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; prim();</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于最小生成树来说，Prim和Kruskal都很优秀，但Prim用在稠密图（点少边多的图）有奇效，两者都很优秀，一般会一种即可，有追求的当然都要掌握，毕竟并查集也是一个重点。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;首先，最小生成树是一副连通加权无向图中一棵权值最小的生成树。&lt;del&gt;废话&lt;/del&gt;&lt;br&gt;其次，Prim算法于1930年由捷克数学家沃伊捷赫·亚尔尼克（英语：Vojtěch Jarník）发现；并在1957年由美国计算机科学家罗伯特·普里姆（英语：Robert C. Prim）独立发现；1959年，艾兹格·迪科斯彻再次发现了该算法。因此，在某些场合，普里姆算法又被称为DJP算法、亚尔尼克算法或普里姆－亚尔尼克算法。&lt;del&gt;这一小段粘自百度百科&lt;/del&gt;&lt;br&gt;&lt;del&gt;真的没啥可说的&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;算法的思路&quot;&gt;&lt;a href=&quot;#算法的思路&quot; class=&quot;headerlink&quot; title=&quot;算法的思路&quot;&gt;&lt;/a&gt;算法的思路&lt;/h2&gt;&lt;p&gt;&lt;del&gt;我真的不想多说，跟Dijkstra一个样&lt;/del&gt;&lt;br&gt;&lt;a href=&quot;https://fancyu.coding.me/2018/09/02/Dijkstra/&quot;&gt;Dijkstra&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="图论" scheme="http://FanCYu.coding.me/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>组合数</title>
    <link href="http://FanCYu.coding.me/2018/10/10/%E7%BB%84%E5%90%88%E6%95%B0/"/>
    <id>http://FanCYu.coding.me/2018/10/10/组合数/</id>
    <published>2018-10-10T13:13:02.000Z</published>
    <updated>2018-10-17T00:00:41.342Z</updated>
    
    <content type="html"><![CDATA[<p>又是数论的东西。。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>什么是组合数呢？<br>很简单，也别问神奇海螺了。</p><p>从n个不同元素中，任取m(m≤n)个元素并成一组，叫做从n个不同元素中取出m个元素的一个组合；从n个不同元素中取出m(m≤n)个元素的所有组合的个数，叫做从n个不同元素中取出m个元素的组合数。</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>看起来很有用的样子，怎么求组合数呢？<br>从n中取m个数写作C(n,m)，并且显然C(n,m)=C(n,n-m)。<br><a id="more"></a><br><img src="/img/2018/1010/2018101001.jpg" alt="嗯。。很好算"></p><p>算法不难，公式哪来的我也不知道，拿去用就行了。<br>应付阶乘记得加上快速乘<a href="https://fancyu.coding.me/2018/09/26/%E5%BF%AB%E9%80%9F%E5%B9%82/">传送门</a></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>为什么每天的模拟题都要有数论啊。。。</p><p><img src="/img/2018/1010/2018101002.jpg" alt="jjh dalao出的题"></p><p>毫无头绪，暴力都不会打，可最后还是骗了20分。。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int p,q,k,n,maxx,ans;</span><br><span class="line">void dfs(int d,int w,int sum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sum==d&amp;&amp;w==n) &#123;ans++;<span class="built_in">return</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(w&gt;n) <span class="built_in">return</span>;</span><br><span class="line">maxx=d+n*k;</span><br><span class="line"><span class="keyword">for</span>(register int i=-k;i&lt;=maxx;++i)</span><br><span class="line">dfs(d,w+1,sum+i);</span><br><span class="line"><span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们来思考一下正解：</p><p>我们先想一下，如果这个数列是递增的该怎么做？<br>除去首项与末项，我们还有n-2项需要填，需要我们去挑选不同的数字，<br>因为这个数列是递增的，所以我们只有q-p-1项去挑选。<br>(举个栗子，比如p=3，q=9，我们只有4~8一共5个数来选)<br>所以针对这个简化的问题，答案是 C ( q-p-1，n-2 ) 。</p><p>接着我们考虑，如果把递增改为不递减呢？<br>上面那个问题的每一项减去前一项（题目上的k）都是大于0的，<br>这个问题无非就是上面的问题加了一个k=0的情况，<br>当k=0时，我们可以选择和前面相同的数，对于存在k=0的情况（不递减的所有情况除去上面递增的情况，也就是k可以=0增加的情况），至少有两个数是相等的（因为任意两数都不相等的情况属于上面递增数列的情况，而我们现在单独讨论k=0的情况）。<br>因为一共n个数全都可以选，至少有两数相等，所以可供我们选择的数多了n-1个。<br>因此，此时的答案是  C ( q-p+(n-1)-1 ，n-2 ) 。</p><p>然后呢，k=0的情况可供选择的数多了n-1个，我们不难发现，k每增加1，情况可供选择的数就会增加n-1个，理由同上。<br>所以最终答案就是  C ( q-p+(k+1)*(n-1)-1 ，n-2 ) 。</p><p>如果看的不是很懂，具体参考维基的介绍<a href="https://zh.wikipedia.org/wiki/%E9%9A%94%E6%9D%BF%E6%B3%95" target="_blank" rel="noopener">隔板法</a>，记得翻墙去看。</p><p>好，公式推出来以后，问题就解决了，直接用组合数的计算公式计算答案就行了。因为要对除法取模，所以又要用费马小定理，再加上快速幂，快速乘就可以了。</p><p>代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstdio&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">inline int <span class="built_in">read</span>()</span><br><span class="line">&#123;</span><br><span class="line">int nnn=1,numm=0;</span><br><span class="line">char ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!isdigit(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)nnn=-1;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(isdigit(ch))</span><br><span class="line">&#123;</span><br><span class="line">numm=(numm&lt;&lt;1)+(numm&lt;&lt;3)+ch-<span class="string">'0'</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> nnn*numm;</span><br><span class="line">&#125;</span><br><span class="line">const int P=998244353;</span><br><span class="line"></span><br><span class="line">long long quick(long long xt,long long yt)</span><br><span class="line">&#123;</span><br><span class="line">    long long summ=0;</span><br><span class="line">    <span class="keyword">while</span>(yt)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(yt&amp;1) summ=(summ+xt)%P;</span><br><span class="line">        xt=(xt+xt)%P;</span><br><span class="line">        yt&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> summ;</span><br><span class="line">&#125;</span><br><span class="line">long long pow(long long ax,long long bx)</span><br><span class="line">&#123;</span><br><span class="line">    long long anss=1;</span><br><span class="line">    <span class="keyword">while</span>(bx)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(bx&amp;1) anss=quick(anss,ax);</span><br><span class="line">        ax=quick(ax,ax);</span><br><span class="line">        bx&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> anss;</span><br><span class="line">&#125;</span><br><span class="line">long long p,q,k,n,x1,x2,x3,ans;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">freopen(<span class="string">"sequence.in"</span>,<span class="string">"r"</span>,stdin);</span><br><span class="line">freopen(<span class="string">"sequence.out"</span>,<span class="string">"w"</span>,stdout);</span><br><span class="line">register int t=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(register int o=1;o&lt;=t;++o)</span><br><span class="line">&#123;</span><br><span class="line">p=<span class="built_in">read</span>(),q=<span class="built_in">read</span>(),k=<span class="built_in">read</span>(),n=<span class="built_in">read</span>();</span><br><span class="line">x1=1,x2=1,x3=1;</span><br><span class="line"><span class="keyword">for</span>(register int i=2;i&lt;=n-2;++i)</span><br><span class="line">x1=quick(x1,i);</span><br><span class="line"><span class="keyword">for</span>(register int i=2;i&lt;=q-p+(k+1)*(n-1)-1;++i)</span><br><span class="line">x2=quick(x2,i);</span><br><span class="line"><span class="keyword">for</span>(register int i=2;i&lt;=q-p+(k+1)*(n-1)-n+1;++i)</span><br><span class="line">x3=quick(x3,i);</span><br><span class="line">ans=quick(x2,pow(quick(x1,x3),P-2));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这道题我感觉难度还是挺大的，noip有出组合数的可能，但是应该不会出这种难度的题。但是会做这道题了，还怕noip考你组合数吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又是数论的东西。。&lt;/p&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;什么是组合数呢？&lt;br&gt;很简单，也别问神奇海螺了。&lt;/p&gt;
&lt;p&gt;从n个不同元素中，任取m(m≤n)个元素并成一组，叫做从n个不同元素中取出m个元素的一个组合；从n个不同元素中取出m(m≤n)个元素的所有组合的个数，叫做从n个不同元素中取出m个元素的组合数。&lt;/p&gt;
&lt;h2 id=&quot;计算&quot;&gt;&lt;a href=&quot;#计算&quot; class=&quot;headerlink&quot; title=&quot;计算&quot;&gt;&lt;/a&gt;计算&lt;/h2&gt;&lt;p&gt;看起来很有用的样子，怎么求组合数呢？&lt;br&gt;从n中取m个数写作C(n,m)，并且显然C(n,m)=C(n,n-m)。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="数论" scheme="http://FanCYu.coding.me/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="例题" scheme="http://FanCYu.coding.me/tags/%E4%BE%8B%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>卡特兰数</title>
    <link href="http://FanCYu.coding.me/2018/10/09/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"/>
    <id>http://FanCYu.coding.me/2018/10/09/卡特兰数/</id>
    <published>2018-10-09T10:53:02.000Z</published>
    <updated>2018-10-17T00:00:49.826Z</updated>
    
    <content type="html"><![CDATA[<p>不知道为啥，总觉得数论很难，而noip2017的day1 t1给了我很大的心里阴影<br>不管怎么样，也不能不管数论啊。。。</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>首先，什么是卡特兰数呢<br><img src="/img/2018/1009/神奇海螺.jpg" alt="估计也就神奇海螺会数论了吧。。"><br><!--more--><br>Catalan数好像来自一个这样的问题<br>一个栈的进栈序列为1,2,3，……，n，有多少个不同的出栈序列？</p><p>我们来分析一下<br>首先，我们设f（n）=序列个数为n的出栈序列种数。（我们假定，最后出栈的元素为k，显然，k取不同值时的情况是相互独立的，也就是求出每种k最后出栈的情况数后可用加法原则，由于k最后出栈，因此，在k入栈之前，比k小的值均出栈，此处情况有f(k-1)种，而之后比k大的值入栈，且都在k之前出栈，因此有f(n-k)种方式，由于比k小和比k大的值入栈出栈情况是相互独立的，此处可用乘法原则，f(n-k)*f(k-1)种，求和便是Catalan递归式。</p><p>还有一种分析<br>对于每一个数来说，必须进栈一次、出栈一次。我们把进栈设为状态‘1’，出栈设为状态‘0’。n个数的所有状态对应n个1和n个0组成的2n位二进制数。由于等待入栈的操作数按照1‥n的顺序排列、入栈的操作数b大于等于出栈的操作数a(a≤b)，因此输出序列的总数目=由左而右扫描由n个1和n个0组成的2n位二进制数，1的累计数不小于0的累计数的方案种数。<br>在2n位二进制数中填入n个1的方案数为c(2n,n),不填1的其余n位自动填0。从中减去不符合要求（由左而右扫描，0的累计数大于1的累计数）的方案数即为所求。<br><img src="/img/2018/1009/2018100901.jpg" alt="看着是很简单"><br>看图，其实就是问从A走到B有多少种走法（每次只能向右或向上走一个单位长度，就像对于栈只有进栈和出栈两种操作）</p><p>这个答案序列我们就把它称为Catalan数列，中文音译过来卡特兰，卡塔兰都行。</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>怎么得出卡特兰序列呢</p><p>令h(0)=1,h(1)=1，catalan数满足递推式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C(n)= C(0)*C(n-1)+C(1)*C(n-2)+...+C(n-1)*C(0) (n&gt;=2)</span><br></pre></td></tr></table></figure></p><p>不过有个更简单的式子，我一般用这个:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C(n)=C(n-1)*(4*n-2)/(n+1)</span><br></pre></td></tr></table></figure></p><p>第一个递推式很容易推出来，第二个我不知道怎么推的，可能是第一个式子的简化吧，我不知道。</p><p>题目要求计算卡特兰数的时候通常要取模，这个时候就用到了费马小定理，假设模数为P(P为质数，否则要用欧拉定理)，则<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C(n)=C(n-1)*(4*n-2)*(n+1)^(P-2)</span><br></pre></td></tr></table></figure></p><p>上面的求法快速幂是必要的。<br>求逆元的方法有很多，在这里推荐一个线性求逆元，这样就不用快速幂了。<br><a href="https://fancyu.coding.me/2018/09/26/%E5%BF%AB%E9%80%9F%E5%B9%82/">快速幂与线性求逆元传送门</a></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>用到某些找规律题还是很舒服的，枚举前几个数，如果是1,2,5,14,42，要是我，我会毫不犹豫地敲卡特兰数列的。<br>今天就遇到这样一道题<br><img src="/img/2018/1009/2018100902.jpg" alt="我想起了一首中国风吉他曲《无题》"></p><p>100%的数据是T≤50000，n≤200000</p><p>很明显是道数论题，然后我直接就懵了，暴力都不会打，我想可能会有公式，然后我就尝试着推一推，（也是受noip2017小凯的疑惑影响才要推公式，以下是我的错误推论，怕被我误导的跳过这一点）我手推把第四项算出来是14，第五项是42，然后计算了一下第六项是146（正确的是132，我也没法检验对错啊）然后就有了下面的思路：<br><img src="/img/2018/1009/2018100903.jpg" alt="想想我推出来这个式子还挺不容易的"></p><p>看着是挺对的，之后我测试了题目给的大数据，就知道离爆零不远了</p><p>咳咳回归正题<br>其实这题的答案就是一个Catalan数列，对于要取模的数用费马小定理,再加上快速幂就行了，<del>我把快速乘也加上了，其实不加快速乘会更快。</del><br>代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstdio&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">inline int <span class="built_in">read</span>()</span><br><span class="line">&#123;</span><br><span class="line">int nnn=1,numm=0;</span><br><span class="line">char ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!isdigit(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)nnn=-1;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(isdigit(ch))</span><br><span class="line">&#123;</span><br><span class="line">numm=(numm&lt;&lt;1)+(numm&lt;&lt;3)+ch-<span class="string">'0'</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> nnn*numm;</span><br><span class="line">&#125;</span><br><span class="line">const int p = 1000000007;</span><br><span class="line"></span><br><span class="line">long long quick(long long xt,long long yt)</span><br><span class="line">&#123;</span><br><span class="line">    long long summ=0;</span><br><span class="line">    <span class="keyword">while</span>(yt)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(yt&amp;1) summ=(summ+xt)%p;</span><br><span class="line">        xt=(xt+xt)%p;</span><br><span class="line">        yt&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> summ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">long long pow(long long ax,long long bx)</span><br><span class="line">&#123;</span><br><span class="line">    long long anss=1;</span><br><span class="line">    <span class="keyword">while</span>(bx)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(bx&amp;1) anss=quick(anss,ax)%p;//ans=ans*a%p;</span><br><span class="line">        ax=quick(ax,ax)%p;//a=a*a%p;</span><br><span class="line">        bx&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> anss;</span><br><span class="line">&#125;</span><br><span class="line">long long w[200005];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">freopen(<span class="string">"notitle.in"</span>,<span class="string">"r"</span>,stdin);</span><br><span class="line">freopen(<span class="string">"notitle.out"</span>,<span class="string">"w"</span>,stdout);</span><br><span class="line">long long xx;</span><br><span class="line">w[1]=1;</span><br><span class="line"><span class="keyword">for</span>(register int i=2;i&lt;=200003;++i)</span><br><span class="line">&#123;</span><br><span class="line">xx=pow(i+1,p-2);</span><br><span class="line">w[i]=quick(w[i-1],quick((4*i-2),xx))%p;</span><br><span class="line">&#125;</span><br><span class="line">int t=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(register int i=1;i&lt;=t;++i)</span><br><span class="line">cout&lt;&lt;w[<span class="built_in">read</span>()]&lt;&lt;endl;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>某学长以前提到过Catalan数列，当时没细讲，我觉得没有那么重要，所以就没太在意。<br>Catalan数列还是很有用的，这道题拉了我不少分，以后再见到答案是Catalan数列的题就不会轻易放过了。。</p><p>最后献上真正的《无题》</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=29393038&auto=0&height=32"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道为啥，总觉得数论很难，而noip2017的day1 t1给了我很大的心里阴影&lt;br&gt;不管怎么样，也不能不管数论啊。。。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="数论" scheme="http://FanCYu.coding.me/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="例题" scheme="http://FanCYu.coding.me/tags/%E4%BE%8B%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>加速——计算</title>
    <link href="http://FanCYu.coding.me/2018/09/26/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>http://FanCYu.coding.me/2018/09/26/快速幂/</id>
    <published>2018-09-26T13:00:00.000Z</published>
    <updated>2018-10-18T12:32:59.600Z</updated>
    
    <content type="html"><![CDATA[<p>可能我的码风有些奇特吧。。。<br>可我觉得挺好的呀</p><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p>时间复杂度O(logN)。<br>注意快速幂的函数名最好不要取pow，有时会撞上stl内置的pow，然后你的程序就炸了。<a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const int P=1000000007;</span><br><span class="line"></span><br><span class="line">long long poww(long long a,long long b)</span><br><span class="line">&#123;</span><br><span class="line">    long long ans=1;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;1)</span><br><span class="line">          ans=ans*a%P;</span><br><span class="line">        a=a*a%P;</span><br><span class="line">        b&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h3><p>为什么叫它快速乘呢？因为它是由快速幂推出来的，只把快速幂的乘号全换成加号，计数器的初始值改为0就是快速乘了，时间复杂度也是O(logN)。所以，<br><strong>快速乘其实一点也不快速</strong>，千万千万不要被它的名字给迷惑了，当数据会爆long long的时候才用的到。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const int P=1000000007;</span><br><span class="line"></span><br><span class="line">long long quick(long long x,long long y)</span><br><span class="line">&#123;</span><br><span class="line">    long long sum=0;</span><br><span class="line">    <span class="keyword">while</span>(y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;1) sum=(sum+x)%P;</span><br><span class="line">        x=(x+x)%P;</span><br><span class="line">        y&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="线性求逆元"><a href="#线性求逆元" class="headerlink" title="线性求逆元"></a>线性求逆元</h3><p>时间复杂度O(N)。<br>通过线性递推求出1~n 在mod P意义下的逆元。强烈推荐用这个方法求逆元。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inv[i]=(P- P/i)*inv[P%i] %P;</span><br></pre></td></tr></table></figure></p><p>证明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">设 x=p%a, y=p/a;（y就是p/a的商,x就是p/a后的余数）</span><br><span class="line">于是： x+ y*a=P;</span><br><span class="line">等式两边同时对p取余:（x + y*a）%P=0;</span><br><span class="line">去括号并移项：x%P = - y*a %P;</span><br><span class="line">将a移至左边: inv[a]*x %P= - y%P;</span><br><span class="line">            inv[a]*x %P= (-y+p)% P;</span><br><span class="line">将x移至右边: inv[a]=(P-y)*inv(x) % P;</span><br><span class="line">将证明开始设的x,y值代入上面式子中,则有：</span><br><span class="line">inv[a]=(P- P/a)*inv[P%a] %P;</span><br></pre></td></tr></table></figure></p><h3 id="矩阵乘法快速幂"><a href="#矩阵乘法快速幂" class="headerlink" title="矩阵乘法快速幂"></a>矩阵乘法快速幂</h3><p>时间复杂度O(X<em>Y</em>Z<em>logN)。<br>（一个X</em>Y的矩阵乘一个Y<em>Z的矩阵得到一个X</em>Z的矩阵）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">const int P=1000000007;</span><br><span class="line">int X,Y,Z;</span><br><span class="line">struct fancy</span><br><span class="line">&#123;</span><br><span class="line">int a[N][N];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fancy mul(fancy a,fancy b)</span><br><span class="line">&#123;</span><br><span class="line">fancy ans;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=X;++i)</span><br><span class="line"><span class="keyword">for</span>(int j=1;j&lt;=Z;++j)</span><br><span class="line">&#123;</span><br><span class="line">ans.a[i][j]=0;</span><br><span class="line"><span class="keyword">for</span>(int k=1;k&lt;=Y;++k)</span><br><span class="line">ans.a[i][j]=(ans.a[i][j]+a.a[i][k]*b.a[k][j])%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">fancy poww(fancy a,long long b)</span><br><span class="line">&#123;</span><br><span class="line">    fancy ans=a;</span><br><span class="line">    --b;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;1)</span><br><span class="line">          ans=mul(ans,a);</span><br><span class="line">        a=mul(a,a);</span><br><span class="line">      b&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>先总结这么多，其他想起来日后再更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可能我的码风有些奇特吧。。。&lt;br&gt;可我觉得挺好的呀&lt;/p&gt;
&lt;h3 id=&quot;快速幂&quot;&gt;&lt;a href=&quot;#快速幂&quot; class=&quot;headerlink&quot; title=&quot;快速幂&quot;&gt;&lt;/a&gt;快速幂&lt;/h3&gt;&lt;p&gt;时间复杂度O(logN)。&lt;br&gt;注意快速幂的函数名最好不要取pow，有时会撞上stl内置的pow，然后你的程序就炸了。
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="优化" scheme="http://FanCYu.coding.me/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>单源最短路——Dijkstra</title>
    <link href="http://FanCYu.coding.me/2018/09/02/Dijkstra/"/>
    <id>http://FanCYu.coding.me/2018/09/02/Dijkstra/</id>
    <published>2018-09-02T14:00:00.000Z</published>
    <updated>2018-10-17T07:40:10.580Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>迪科斯彻算法使用了广度优先搜索解决赋权有向图或者无向图的单源最短路径问题，算法最终得到一个最短路径树。该算法常用于路由算法或者作为其他图算法的一个子模块。</p><h3 id="算法的思路"><a href="#算法的思路" class="headerlink" title="算法的思路"></a>算法的思路</h3><p>Dijkstra算法采用的是一种贪心的策略，声明一个数组dis来保存源点到各个顶点的最短距离和一个保存已经找到了最短路径的顶点的集合：T，初始时，原点 s 的路径权重被赋为 0 （dis[s] = 0）。若对于顶点 s 存在能直接到达的边（s,m），则把dis[m]设为w（s, m）,同时把所有其他（s不能直接到达的）顶点的路径长度设为无穷大。初始时，集合T只有顶点s。<br><a id="more"></a><br>然后，从dis数组选择最小值，则该值就是源点s到该值对应的顶点的最短路径，并且把该点加入到T中，OK，此时完成一个顶点，<br>然后，我们需要看看新加入的顶点是否可以到达其他顶点并且看看通过该顶点到达其他点的路径长度是否比源点直接到达短，如果是，那么就替换这些顶点在dis中的值。<br>然后，又从dis中找出最小值，重复上述动作，直到T中包含了图的所有顶点。</p><h2 id="示例演示"><a href="#示例演示" class="headerlink" title="示例演示"></a>示例演示</h2><p>下面我求下图，从顶点v1到其他各个顶点的最短路径<br><img src="/img/2018/0902/201809021.png" alt="整个图"><br>首先第一步，我们先声明一个dis数组，该数组初始化的值为：<br><img src="/img/2018/0902/201809022.png" alt="第一步"><br>我们的顶点集T的初始化为：T={v1}<br>既然是求 v1顶点到其余各个顶点的最短路程，那就先找一个离 1 号顶点最近的顶点。通过数组 dis 可知当前离v1顶点最近是 v3顶点。当选择了 2 号顶点后，dis[2]（下标从0开始）的值就已经从“估计值”变为了“确定值”，即 v1顶点到 v3顶点的最短路程就是当前 dis[2]值。将V3加入到T中。<br>为什么呢？因为目前离 v1顶点最近的是 v3顶点，并且这个图所有的边都是正数，那么肯定不可能通过第三个顶点中转，使得 v1顶点到 v3顶点的路程进一步缩短了。因为 v1顶点到其它顶点的路程肯定没有 v1到 v3顶点短.<br>OK，既然确定了一个顶点的最短路径，下面我们就要根据这个新入的顶点V3会有出度，发现以v3 为弧尾的有： &lt; v3,v4 &gt;,那么我们看看路径：v1–v3–v4的长度是否比v1–v4短，其实这个已经是很明显的了，因为dis[3]代表的就是v1–v4的长度为无穷大，而v1–v3–v4的长度为：10+50=60，所以更新dis[3]的值,得到如下结果：<br><img src="/img/2018/0902/201809023.png" alt="第二步"><br>因此 dis[3]要更新为 60。这个过程有个专业术语叫做“松弛”。即 v1顶点到 v4顶点的路程即 dis[3]，通过 &lt; v3,v4&gt; 这条边松弛成功。这便是 Dijkstra 算法的主要思想：通过“边”来松弛v1顶点到其余各个顶点的路程。<br>然后，我们又从除dis[2]和dis[0]外的其他值中寻找最小值，发现dis[4]的值最小，通过之前是解释的原理，可以知道v1到v5的最短距离就是dis[4]的值，然后，我们把v5加入到集合T中，然后，考虑v5的出度是否会影响我们的数组dis的值，v5有两条出度：&lt; v5,v4&gt;和 &lt; v5,v6&gt;,然后我们发现：v1–v5–v4的长度为：50，而dis[3]的值为60，所以我们要更新dis[3]的值.另外，v1-v5-v6的长度为：90，而dis[5]为100，所以我们需要更新dis[5]的值。更新后的dis数组如下图:<br><img src="/img/2018/0902/201809023.png" alt="第三步"><br>然后，继续从dis中选择未确定的顶点的值中选择一个最小的值，发现dis[3]的值是最小的，所以把v4加入到集合T中，此时集合T={v1,v3,v5,v4},然后，考虑v4的出度是否会影响我们的数组dis的值，v4有一条出度：&lt; v4,v6&gt;,然后我们发现：v1–v5–v4–v6的长度为：60，而dis[5]的值为90，所以我们要更新dis[5]的值，更新后的dis数组如下图：<br><img src="/img/2018/0902/201809024.png" alt="第四步"><br>然后，我们使用同样原理，分别确定了v6和v2的最短路径，最后dis的数组的值如下：<br><img src="/img/2018/0902/201809025.png" alt="第五步"><br>因此，从图中，我们可以发现v1-v2的值为：∞，代表没有路径从v1到达v2。所以我们得到的最后的结果为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">起点  终点    最短路径    长度</span><br><span class="line">v1    v2     无          ∞    </span><br><span class="line">      v3     &#123;v1,v3&#125;    10</span><br><span class="line">      v4     &#123;v1,v5,v4&#125;  50</span><br><span class="line">      v5     &#123;v1,v5&#125;    30</span><br><span class="line">      v6     &#123;v1，v5,v4,v6&#125; 60</span><br></pre></td></tr></table></figure></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>利用邻接表和stl堆优化，我们可以把时间复杂度优化到O(NlogM),以下是用邻接表和堆优化来优化这个算法的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;queue&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">const int M=5e5+5;</span><br><span class="line">int head[M],nxt[M],to[M],v[M],dis[M];</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">int d,k;</span><br><span class="line">node(int d,int k) : d(d) , k(k) &#123;&#125;</span><br><span class="line">friend bool operator &lt; (node a,node b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> a.d &gt; b.d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">register int n,m,S,x,y,z,tot=0;</span><br><span class="line">scanf(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;S);</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">scanf(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">++tot;</span><br><span class="line">nxt[tot]=head[x],head[x]=tot,to[tot]=y,v[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n;++i)</span><br><span class="line">dis[i]=1e9;</span><br><span class="line">dis[S]=0;</span><br><span class="line">q.push(node(0,S));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">node t=q.top();q.pop();</span><br><span class="line"><span class="keyword">for</span>(int i=head[t.k];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[to[i]]&gt;dis[t.k]+v[i])</span><br><span class="line">&#123;</span><br><span class="line">dis[to[i]]=dis[t.k]+v[i];</span><br><span class="line">q.push(node(dis[to[i]],to[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,dis[i]==1e9 ? -1 : dis[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>迪杰斯特拉可以说是图论中求单源最短路最优的算法了(求全图最短路用弗洛里德除外)，所以同志们一定要掌握好这个算法。<br><del>早日放弃SPFA和Floyd吧</del></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;迪科斯彻算法使用了广度优先搜索解决赋权有向图或者无向图的单源最短路径问题，算法最终得到一个最短路径树。该算法常用于路由算法或者作为其他图算法的一个子模块。&lt;/p&gt;
&lt;h3 id=&quot;算法的思路&quot;&gt;&lt;a href=&quot;#算法的思路&quot; class=&quot;headerlink&quot; title=&quot;算法的思路&quot;&gt;&lt;/a&gt;算法的思路&lt;/h3&gt;&lt;p&gt;Dijkstra算法采用的是一种贪心的策略，声明一个数组dis来保存源点到各个顶点的最短距离和一个保存已经找到了最短路径的顶点的集合：T，初始时，原点 s 的路径权重被赋为 0 （dis[s] = 0）。若对于顶点 s 存在能直接到达的边（s,m），则把dis[m]设为w（s, m）,同时把所有其他（s不能直接到达的）顶点的路径长度设为无穷大。初始时，集合T只有顶点s。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="图论" scheme="http://FanCYu.coding.me/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>加速——卡常</title>
    <link href="http://FanCYu.coding.me/2018/08/22/%E5%8D%A1%E5%B8%B8%E5%8A%A0%E9%80%9F/"/>
    <id>http://FanCYu.coding.me/2018/08/22/卡常加速/</id>
    <published>2018-08-22T10:06:02.000Z</published>
    <updated>2018-10-17T00:01:04.350Z</updated>
    
    <content type="html"><![CDATA[<p>代码中加速非常重要 <del>废话</del><br>然而我入坑了才意识到</p><h2 id="首先是应付卡常的加速"><a href="#首先是应付卡常的加速" class="headerlink" title="首先是应付卡常的加速"></a>首先是应付卡常的加速</h2><h3 id="jzyzOJ-1295"><a href="#jzyzOJ-1295" class="headerlink" title="jzyzOJ 1295"></a>jzyzOJ 1295</h3><p>通过这道题我终于体会到了输入输出优化的重要性。。。<br>其实主要就是快读<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstring&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cmath&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int a[3000][3000]=&#123;&#125;;</span><br><span class="line">int f[3000][3000]=&#123;&#125;;</span><br><span class="line">int Up[3000][3000]=&#123;&#125;;</span><br><span class="line">int Right[3000][3000]=&#123;&#125;;</span><br><span class="line">int Left[3000][3000]=&#123;&#125;;</span><br><span class="line">inline int <span class="built_in">read</span>()</span><br><span class="line">&#123;</span><br><span class="line">int n=1,num=0;</span><br><span class="line">char ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!isdigit(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)n=-1;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(isdigit(ch))</span><br><span class="line">&#123;</span><br><span class="line">num=(num&lt;&lt;1)+(num&lt;&lt;3)+ch-<span class="string">'0'</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> n*num;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,m,ans=0;</span><br><span class="line">    n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(register int i=1;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(register int j=1;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line">a[i][j]=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==0)</span><br><span class="line">&#123;</span><br><span class="line">Up[i+1][j]=Up[i][j]+1;</span><br><span class="line">Left[i][j+1]=Left[i][j]+1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(register int i=1;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(register int j=m;j&gt;=1;--j)</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==0)</span><br><span class="line">Right[i][j-1]=Right[i][j]+1;</span><br><span class="line"><span class="keyword">for</span>(register int i=1;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(register int j=1;j&lt;=m;++j)</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==1)</span><br><span class="line">&#123;</span><br><span class="line">f[i][j]=min(f[i-1][j-1],Left[i][j]);</span><br><span class="line">f[i][j]=min(f[i][j],Up[i][j])+1;</span><br><span class="line">ans=max(ans,f[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">memset(f,0,sizeof(f));</span><br><span class="line">    <span class="keyword">for</span>(register int i=1;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(register int j=m;j&gt;=1;--j)</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==1)</span><br><span class="line">&#123;</span><br><span class="line">f[i][j]=min(f[i-1][j+1],Right[i][j]);</span><br><span class="line">f[i][j]=min(f[i][j],Up[i][j])+1;</span><br><span class="line">ans=max(ans,f[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>题目贴出来。。<br><img src="/img/2018/0823/201808233.jpg" alt="一道大水题"></p><p>这个是只用流输入输出的优化<br><img src="/img/2018/0823/201808231.jpg" alt="欲哭无泪"><br><del>这道题给我这个教训以前，我曾以为这个优化很牛逼</del></p><p>这个是前面贴出代码的效果<br><img src="/img/2018/0823/201808232.jpg" alt="快了五倍"></p><h3 id="其他优化日后更新-相信我"><a href="#其他优化日后更新-相信我" class="headerlink" title="其他优化日后更新 相信我"></a>其他优化日后更新 <del>相信我</del></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码中加速非常重要 &lt;del&gt;废话&lt;/del&gt;&lt;br&gt;然而我入坑了才意识到&lt;/p&gt;
&lt;h2 id=&quot;首先是应付卡常的加速&quot;&gt;&lt;a href=&quot;#首先是应付卡常的加速&quot; class=&quot;headerlink&quot; title=&quot;首先是应付卡常的加速&quot;&gt;&lt;/a&gt;首先是应付卡常的加速&lt;/h2&gt;&lt;h3 id=&quot;jzyzOJ-1295&quot;&gt;&lt;a href=&quot;#jzyzOJ-1295&quot; class=&quot;headerlink&quot; title=&quot;jzyzOJ 1295&quot;&gt;&lt;/a&gt;jzyzOJ 1295&lt;/h3&gt;&lt;p&gt;通过这道题我终于体会到了输入输出优化的重要性。。。&lt;br&gt;其实主要就是快读&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="优化" scheme="http://FanCYu.coding.me/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>单源最短路——SPFA</title>
    <link href="http://FanCYu.coding.me/2018/08/12/SPFA/"/>
    <id>http://FanCYu.coding.me/2018/08/12/SPFA/</id>
    <published>2018-08-12T10:00:00.000Z</published>
    <updated>2018-10-17T07:44:36.122Z</updated>
    
    <content type="html"><![CDATA[<p>SPFA的复杂度好像被证明出是错的，所以个人强烈推荐用Dijkstra求单源最短路<br><a href="https://fancyu.coding.me/2018/09/02/Dijkstra/">传送门</a><br><del>因为个人认为SPFA远不如Dijkstra，所以这里就稍微懒了些</del></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>什么是SPFA算法呢？<br>设立一个先进先出的队列q用来保存待优化的结点，优化时每次取出队首结点u，并且用u点当前的最短路径估计值对离开u点所指向的结点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾。这样不断从队列中取出结点来进行松弛操作，直至队列空为止。<br><a id="more"></a><br>松弛操作的原理是著名的定理：“三角形两边之和大于第三边”，在信息学中我们叫它三角不等式。所谓对结点i,j进行松弛，就是判定是否dis[j]&gt;dis[i]+w[i,j]，如果该式成立则将dis[j]减小到dis[i]+w[i,j]，否则不动。</p><h2 id="和广搜BFS的区别："><a href="#和广搜BFS的区别：" class="headerlink" title="和广搜BFS的区别："></a>和广搜BFS的区别：</h2><p>SPFA 在形式上和广度(宽度)优先搜索非常类似，不同的是BFS中一个点出了队列就不可能重新进入队列，但是SPFA中一个点可能在出队列之后再次被放入队列，也就是一个点改进过其它的点之后，过了一段时间可能本身被改进(重新入队)，于是再次用来改进其它的点，这样反复迭代下去。</p><h2 id="算法描述："><a href="#算法描述：" class="headerlink" title="算法描述："></a>算法描述：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void  spfa(s);  //求单源点s到其它各顶点的最短距离</span><br><span class="line">    <span class="keyword">for</span> i=1 to n <span class="keyword">do</span> &#123; dis[i]=∞; vis[i]=<span class="literal">false</span>; &#125;   //初始化每点到s的距离，不在队列</span><br><span class="line">    dis[s]=0;  //将dis[源点]设为0</span><br><span class="line">    vis[s]=<span class="literal">true</span>; //源点s入队列</span><br><span class="line">    head=0; tail=1; q[tail]=s; //源点s入队, 头尾指针赋初值</span><br><span class="line">    <span class="keyword">while</span> head&lt;tail <span class="keyword">do</span> &#123;</span><br><span class="line">       head+1;  //队首出队</span><br><span class="line">       v=q[head];  //队首结点v</span><br><span class="line">       vis[v]=<span class="literal">false</span>;  //释放对v的标记，可以重新入队</span><br><span class="line">       <span class="keyword">for</span> 每条边(v,i)  //对于与队首v相连的每一条边</span><br><span class="line">    <span class="keyword">if</span> (dis[i]&gt;dis[v]+a[v][i])  //如果不满足三角形性质</span><br><span class="line"> dis[i] = dis[v] + a[v][i]   //松弛dis[i]</span><br><span class="line"><span class="keyword">if</span> (vis[i]=<span class="literal">false</span>) &#123;tail+1; q[tail]=i; vis[i]=<span class="literal">true</span>;&#125; //不在队列，则加入队列</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SPFA的复杂度好像被证明出是错的，所以个人强烈推荐用Dijkstra求单源最短路&lt;br&gt;&lt;a href=&quot;https://fancyu.coding.me/2018/09/02/Dijkstra/&quot;&gt;传送门&lt;/a&gt;&lt;br&gt;&lt;del&gt;因为个人认为SPFA远不如Dijkstra，所以这里就稍微懒了些&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;什么是SPFA算法呢？&lt;br&gt;设立一个先进先出的队列q用来保存待优化的结点，优化时每次取出队首结点u，并且用u点当前的最短路径估计值对离开u点所指向的结点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾。这样不断从队列中取出结点来进行松弛操作，直至队列空为止。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://FanCYu.coding.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://FanCYu.coding.me/tags/C/"/>
    
      <category term="图论" scheme="http://FanCYu.coding.me/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>hexo的一些操作</title>
    <link href="http://FanCYu.coding.me/2018/08/01/hexo%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>http://FanCYu.coding.me/2018/08/01/hexo的一些操作/</id>
    <published>2018-08-01T10:06:02.000Z</published>
    <updated>2018-09-21T13:43:05.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>我找到了两个网站</p><p><a href="https://blog.csdn.net/Zhangxiaorui_9/article/details/79723288" target="_blank" rel="noopener">click here</a></p><p><a href="https://blog.csdn.net/dxxzst/article/details/76135750" target="_blank" rel="noopener">click here</a><br><a id="more"></a><br>不过都看不懂。。<br>最后这个详细点<br><a href="https://blog.csdn.net/wxl1555/article/details/79293159" target="_blank" rel="noopener">click here</a></p><h2 id="插入媒体"><a href="#插入媒体" class="headerlink" title="插入媒体"></a>插入媒体</h2><p>可以插入图片，音乐，视频<br><a href="https://blog.csdn.net/qq_26891045/article/details/51693571" target="_blank" rel="noopener">click here</a></p><h2 id="这个厉害"><a href="#这个厉害" class="headerlink" title="这个厉害"></a>这个厉害</h2><p><a href="https://www.cnblogs.com/jarson-7426/p/5515870.html" target="_blank" rel="noopener">click here</a></p><h2 id="相册功能"><a href="#相册功能" class="headerlink" title="相册功能"></a>相册功能</h2><p>看起来好难弄<br><a href="https://zlwis.vip/2016/01/17/hexo%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/#more" target="_blank" rel="noopener">click here</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;迁移&quot;&gt;&lt;a href=&quot;#迁移&quot; class=&quot;headerlink&quot; title=&quot;迁移&quot;&gt;&lt;/a&gt;迁移&lt;/h2&gt;&lt;p&gt;我找到了两个网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Zhangxiaorui_9/article/details/79723288&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;click here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/dxxzst/article/details/76135750&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;click here&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于hexo的主题</title>
    <link href="http://FanCYu.coding.me/2018/08/01/%E5%85%B3%E4%BA%8Ehexo%E7%9A%84%E4%B8%BB%E9%A2%98/"/>
    <id>http://FanCYu.coding.me/2018/08/01/关于hexo的主题/</id>
    <published>2018-08-01T10:06:02.000Z</published>
    <updated>2018-09-04T14:00:00.887Z</updated>
    
    <content type="html"><![CDATA[<p>这里有个网站，推荐了几个不错的主题，还有预览<br><a href="https://www.jianshu.com/p/bcdbe7347c8d" target="_blank" rel="noopener">click here</a><br><a id="more"></a><br>有两个我很喜欢<br><a href="http://litten.me/" target="_blank" rel="noopener">yilia</a><br><a href="http://louisbarranqueiro.github.io/hexo-theme-tranquilpeak/" target="_blank" rel="noopener">Tranquilpeak</a><br>初步打算弄成yilia<br>然后配置yilia主题的步骤在这里<br><a href="http://www.lookk.cn/2017/12/08/hexo-%E9%85%8D%E7%BD%AEyilia%E4%B8%BB%E9%A2%98/" target="_blank" rel="noopener">click here</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里有个网站，推荐了几个不错的主题，还有预览&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/bcdbe7347c8d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;click here&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello the cruel world!</title>
    <link href="http://FanCYu.coding.me/2018/07/31/Hello%20the%20cruel%20world!/"/>
    <id>http://FanCYu.coding.me/2018/07/31/Hello the cruel world!/</id>
    <published>2018-07-31T11:06:02.000Z</published>
    <updated>2018-10-17T07:49:22.436Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/2018/life.jpg" alt="Life is colorfull,Do you agree?"></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=3882876&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/2018/life.jpg&quot; alt=&quot;Life is colorfull,Do you agree?&quot;&gt;&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight
      
    
    </summary>
    
    
  </entry>
  
</feed>
